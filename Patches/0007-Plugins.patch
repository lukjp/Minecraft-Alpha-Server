From ea2fe91342e72ca62b1d78f7a3fbcf040afae1a2 Mon Sep 17 00:00:00 2001
From: stonar96 <minecraft.stonar96@gmail.com>
Date: Fri, 7 Sep 2018 05:07:24 +0200
Subject: [PATCH] Plugins


diff --git a/sources/minecraft_server/com/vanillage/minecraftalphaserver/plugin/Plugin.java b/sources/minecraft_server/com/vanillage/minecraftalphaserver/plugin/Plugin.java
new file mode 100644
index 0000000..867ebca
--- /dev/null
+++ b/sources/minecraft_server/com/vanillage/minecraftalphaserver/plugin/Plugin.java
@@ -0,0 +1,22 @@
+package com.vanillage.minecraftalphaserver.plugin;
+
+import com.vanillage.utils.plugin.SimplePlugin;
+
+import net.minecraft.server.MinecraftServer;
+
+public abstract class Plugin extends SimplePlugin {
+    private MinecraftServer minecraftServer;
+    
+    public final MinecraftServer getMinecraftServer() {
+        return minecraftServer;
+    }
+    
+    final void setMinecraftServer(MinecraftServer minecraftServer) {
+        this.minecraftServer = minecraftServer;
+    }
+    
+    @Override
+    public final String getName() {
+        return super.getName();
+    }
+}
diff --git a/sources/minecraft_server/com/vanillage/minecraftalphaserver/plugin/PluginManager.java b/sources/minecraft_server/com/vanillage/minecraftalphaserver/plugin/PluginManager.java
new file mode 100644
index 0000000..6406d63
--- /dev/null
+++ b/sources/minecraft_server/com/vanillage/minecraftalphaserver/plugin/PluginManager.java
@@ -0,0 +1,30 @@
+package com.vanillage.minecraftalphaserver.plugin;
+
+import com.vanillage.utils.plugin.SimplePluginLoader;
+import com.vanillage.utils.plugin.SimplePluginManager;
+
+import net.minecraft.server.MinecraftServer;
+
+public final class PluginManager extends SimplePluginManager<Plugin> {
+    private final MinecraftServer minecraftServer;
+    
+    public PluginManager(MinecraftServer minecraftServer) {
+        this.minecraftServer = minecraftServer;
+    }
+    
+    @Override
+    protected void enablePlugin(Plugin plugin) {
+        plugin.setMinecraftServer(minecraftServer);
+        super.enablePlugin(plugin);
+    }
+    
+    @Override
+    protected void loadPlugins(SimplePluginLoader<Plugin> pluginLoader) {
+        super.loadPlugins(pluginLoader);
+    }
+    
+    @Override
+    protected void disablePlugins() {
+        super.disablePlugins();
+    }
+}
diff --git a/sources/minecraft_server/com/vanillage/minecraftalphaserver/plugin/PluginManagerProvider.java b/sources/minecraft_server/com/vanillage/minecraftalphaserver/plugin/PluginManagerProvider.java
new file mode 100644
index 0000000..043898e
--- /dev/null
+++ b/sources/minecraft_server/com/vanillage/minecraftalphaserver/plugin/PluginManagerProvider.java
@@ -0,0 +1,29 @@
+package com.vanillage.minecraftalphaserver.plugin;
+
+import com.vanillage.utils.plugin.SimplePluginLoader;
+import com.vanillage.utils.plugin.SimplePluginManagerProvider;
+
+import net.minecraft.server.MinecraftServer;
+
+public final class PluginManagerProvider implements SimplePluginManagerProvider<PluginManager, Plugin> {
+    private final PluginManager pluginManager;
+    
+    public PluginManagerProvider(MinecraftServer minecraftServer) {
+        pluginManager = new PluginManager(minecraftServer);
+    }
+    
+    @Override
+    public PluginManager getPluginManager() {
+        return pluginManager;
+    }
+    
+    @Override
+    public void loadPlugins(SimplePluginLoader<Plugin> pluginLoader) {
+        pluginManager.loadPlugins(pluginLoader);
+    }
+    
+    @Override
+    public void disablePlugins() {
+        pluginManager.disablePlugins();
+    }
+}
diff --git a/sources/minecraft_server/com/vanillage/utils/plugin/JarFilenameFilter.java b/sources/minecraft_server/com/vanillage/utils/plugin/JarFilenameFilter.java
new file mode 100644
index 0000000..49c2c3f
--- /dev/null
+++ b/sources/minecraft_server/com/vanillage/utils/plugin/JarFilenameFilter.java
@@ -0,0 +1,11 @@
+package com.vanillage.utils.plugin;
+
+import java.io.File;
+import java.io.FilenameFilter;
+
+public class JarFilenameFilter implements FilenameFilter {
+    @Override
+    public boolean accept(File dir, String name) {
+        return name.toLowerCase().endsWith(".jar");
+    }
+}
diff --git a/sources/minecraft_server/com/vanillage/utils/plugin/JarsDirectoryPluginLoader.java b/sources/minecraft_server/com/vanillage/utils/plugin/JarsDirectoryPluginLoader.java
new file mode 100644
index 0000000..777172b
--- /dev/null
+++ b/sources/minecraft_server/com/vanillage/utils/plugin/JarsDirectoryPluginLoader.java
@@ -0,0 +1,122 @@
+package com.vanillage.utils.plugin;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.jar.JarEntry;
+import java.util.jar.JarInputStream;
+
+public final class JarsDirectoryPluginLoader<T extends SimplePlugin> implements SimplePluginLoader<T> {
+    private final File pluginJarsDirectory;
+    private final Class<T> pluginClass;
+    
+    public JarsDirectoryPluginLoader(Class<T> pluginClass) {
+        this(new File("./plugins/"), pluginClass);
+    }
+    
+    public JarsDirectoryPluginLoader(File pluginJarsDirectory, Class<T> pluginClass) {
+        if (pluginJarsDirectory == null) {
+            throw new IllegalArgumentException("pluginJarsDirectory cannot be null");
+        }
+        
+        if (pluginClass == null) {
+            throw new IllegalArgumentException("pluginClass cannot be null");
+        }
+        
+        this.pluginJarsDirectory = pluginJarsDirectory;
+        this.pluginClass = pluginClass;
+    }
+    
+    public File getPluginJarsDirectory() {
+        return pluginJarsDirectory;
+    }
+    
+    public Class<T> getPluginClass() {
+        return pluginClass;
+    }
+    
+    @Override
+    public Set<T> loadPlugins() throws MalformedURLException {
+        pluginJarsDirectory.mkdirs();
+        File[] pluginJars = pluginJarsDirectory.listFiles(new JarFilenameFilter());
+        
+        if (pluginJars == null) {
+            return null;
+        }
+        
+        ClassLoader classLoader = new URLClassLoader(fileArrayToURLArray(pluginJars));
+        Set<Class<T>> pluginClasses = extractClassesFromJars(pluginJars, classLoader);
+        return createPlugins(pluginClasses);
+    }
+    
+    private URL[] fileArrayToURLArray(File[] files) throws MalformedURLException {
+        URL[] urls = new URL[files.length];
+
+        for (int i = 0; i < files.length; i++) {
+            urls[i] = files[i].toURI().toURL();
+        }
+
+        return urls;
+    }
+    
+    private Set<Class<T>> extractClassesFromJars(File[] jars, ClassLoader classLoader) {
+        Set<Class<T>> classes = new HashSet<>();
+        
+        for (File jar : jars) {
+            try {
+                classes.addAll(extractClassesFromJar(jar, classLoader));
+            } catch (IOException e) {
+                System.err.println("error while loading " + jar.getName());
+                e.printStackTrace();
+            }
+        }
+        
+        return classes;
+    }
+    
+    @SuppressWarnings("unchecked")
+    private Set<Class<T>> extractClassesFromJar(File jar, ClassLoader classLoader) throws IOException {
+        Set<Class<T>> classes = new HashSet<>();
+        
+        try (JarInputStream jarInputStream = new JarInputStream(new FileInputStream(jar))) {
+            JarEntry jarEntry;
+            
+            while ((jarEntry = jarInputStream.getNextJarEntry()) != null) {
+                if (jarEntry.getName().toLowerCase().endsWith(".class")) {
+                    try {
+                        Class<?> clazz = classLoader.loadClass(jarEntry.getName().substring(0, jarEntry.getName().length() - 6).replace('/', '.'));
+                        
+                        if (pluginClass.isAssignableFrom(clazz)) {
+                            classes.add((Class<T>) clazz);
+                        }
+                    } catch (ClassNotFoundException e) {
+                        System.err.println("error while loading " + jarEntry.getName() + " in " + jar.getName());
+                        e.printStackTrace();
+                    }
+                }
+            }
+        }
+        
+        return classes;
+    }
+    
+    private Set<T> createPlugins(Set<Class<T>> pluginClasses) {
+        Set<T> plugins = new HashSet<>();
+        
+        for (Class<T> pluginClass : pluginClasses) {
+            try {
+                plugins.add(pluginClass.newInstance());
+            } catch (InstantiationException | IllegalAccessException e) {
+                System.err.println("error while instantiating " + pluginClass.getName());
+                e.printStackTrace();
+            }
+        }
+        
+        return plugins;
+    }
+}
diff --git a/sources/minecraft_server/com/vanillage/utils/plugin/SimplePlugin.java b/sources/minecraft_server/com/vanillage/utils/plugin/SimplePlugin.java
new file mode 100644
index 0000000..b36a210
--- /dev/null
+++ b/sources/minecraft_server/com/vanillage/utils/plugin/SimplePlugin.java
@@ -0,0 +1,33 @@
+package com.vanillage.utils.plugin;
+
+public abstract class SimplePlugin {
+    public abstract void onEnable();
+    
+    public abstract void onDisable();
+    
+    public String getName() {
+        return getClass().getSimpleName();
+    }
+    
+    @Override
+    public final boolean equals(Object obj) {
+        if (obj == this) {
+            return true;
+        }
+        
+        if (!(obj instanceof SimplePlugin)) {
+            return false;
+        }
+        
+        String objName = ((SimplePlugin) obj).getName();
+        String name = getName();
+        
+        return objName == name || objName != null && objName.equals(name);
+    }
+    
+    @Override
+    public final int hashCode() {
+        String name = getName();
+        return name == null ? 0 : name.hashCode();
+    }
+}
diff --git a/sources/minecraft_server/com/vanillage/utils/plugin/SimplePluginLoader.java b/sources/minecraft_server/com/vanillage/utils/plugin/SimplePluginLoader.java
new file mode 100644
index 0000000..f00c332
--- /dev/null
+++ b/sources/minecraft_server/com/vanillage/utils/plugin/SimplePluginLoader.java
@@ -0,0 +1,7 @@
+package com.vanillage.utils.plugin;
+
+import java.util.Set;
+
+public interface SimplePluginLoader<T extends SimplePlugin> {
+    Set<T> loadPlugins() throws Exception;
+}
diff --git a/sources/minecraft_server/com/vanillage/utils/plugin/SimplePluginManager.java b/sources/minecraft_server/com/vanillage/utils/plugin/SimplePluginManager.java
new file mode 100644
index 0000000..3055bc3
--- /dev/null
+++ b/sources/minecraft_server/com/vanillage/utils/plugin/SimplePluginManager.java
@@ -0,0 +1,82 @@
+package com.vanillage.utils.plugin;
+
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+public class SimplePluginManager<T extends SimplePlugin> {
+    private final Set<T> plugins = new HashSet<>();
+    
+    public final Set<T> getPlugins() {
+        return Collections.unmodifiableSet(plugins);
+    }
+    
+    protected void enablePlugin(T plugin) {
+        if (plugin == null) {
+            throw new IllegalArgumentException("plugin cannot be null");
+        }
+        
+        if (!plugins.add(plugin)) {
+            throw new IllegalStateException("plugin " + plugin.getName() + " already loaded");
+        }
+        
+        plugin.onEnable();
+    }
+    
+    protected void disablePlugin(T plugin) {
+        if (plugin == null) {
+            throw new IllegalArgumentException("plugin cannot be null");
+        }
+        
+        if (!plugins.remove(plugin)) {
+            throw new IllegalStateException("plugin " + plugin.getName() + " not loaded");
+        }
+        
+        plugin.onDisable();
+    }
+    
+    protected void loadPlugins(SimplePluginLoader<T> pluginLoader) {
+        if (pluginLoader == null) {
+            throw new IllegalArgumentException("pluginLoader cannot be null");
+        }
+        
+        Set<T> plugins = null;
+        
+        try {
+            plugins = pluginLoader.loadPlugins();
+        } catch (Exception e) {
+            System.err.println("error while loading plugins");
+            e.printStackTrace();
+            return;
+        }
+        
+        if (plugins == null) {
+            return;
+        }
+        
+        for (T plugin : plugins) {
+            try {
+                enablePlugin(plugin);
+            } catch (Exception e) {
+                System.err.println("error while enabling plugin " + plugin.getName());
+            }
+        }
+    }
+    
+    protected void disablePlugins() {
+        Iterator<T> iterator = plugins.iterator();
+        
+        while (iterator.hasNext()) {
+            T plugin = iterator.next();
+            iterator.remove();
+            
+            try {
+                plugin.onDisable();
+            } catch (Exception e) {
+                System.err.println("error while disabling plugin " + plugin.getName());
+                e.printStackTrace();
+            }
+        }
+    }
+}
diff --git a/sources/minecraft_server/com/vanillage/utils/plugin/SimplePluginManagerProvider.java b/sources/minecraft_server/com/vanillage/utils/plugin/SimplePluginManagerProvider.java
new file mode 100644
index 0000000..8289cca
--- /dev/null
+++ b/sources/minecraft_server/com/vanillage/utils/plugin/SimplePluginManagerProvider.java
@@ -0,0 +1,9 @@
+package com.vanillage.utils.plugin;
+
+public interface SimplePluginManagerProvider<M extends SimplePluginManager<P>, P extends SimplePlugin> {
+    M getPluginManager();
+    
+    void loadPlugins(SimplePluginLoader<P> pluginLoader);
+    
+    void disablePlugins();
+}
diff --git a/sources/minecraft_server/net/minecraft/server/MinecraftServer.java b/sources/minecraft_server/net/minecraft/server/MinecraftServer.java
index 2fc71ef..e89c164 100644
--- a/sources/minecraft_server/net/minecraft/server/MinecraftServer.java
+++ b/sources/minecraft_server/net/minecraft/server/MinecraftServer.java
@@ -4,6 +4,10 @@
 
 package net.minecraft.server;
 
+import com.vanillage.minecraftalphaserver.plugin.Plugin;//Mod: Plugins
+import com.vanillage.minecraftalphaserver.plugin.PluginManager;//Mod: Plugins
+import com.vanillage.minecraftalphaserver.plugin.PluginManagerProvider;//Mod: Plugins
+import com.vanillage.utils.plugin.JarsDirectoryPluginLoader;//Mod: Plugins
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.ChunkProviderServer;
 import net.minecraft.src.ConsoleLogManager;
@@ -104,6 +108,9 @@ public class MinecraftServer
         String s1 = propertyManagerObj.getStringProperty("level-name", "world");
         logger.info((new StringBuilder()).append("Preparing level \"").append(s1).append("\"").toString());
         func_6017_c(s1);
+        pluginManagerProvider = new PluginManagerProvider(this);//Mod: Plugins
+        pluginManager = pluginManagerProvider.getPluginManager();//Mod: Plugins
+        pluginManagerProvider.loadPlugins(new JarsDirectoryPluginLoader<>(Plugin.class));//Mod: Plugins
         logger.info("Done! For help, type \"help\" or \"?\"");
         return true;
     }
@@ -155,6 +162,7 @@ public class MinecraftServer
     private void func_6013_g()
     {
         logger.info("Stopping server");
+        pluginManagerProvider.disablePlugins();//Mod: Plugins
         if(configManager != null)
         {
             configManager.savePlayerStates();
@@ -578,6 +586,11 @@ public class MinecraftServer
     {
         return minecraftserver.field_6025_n;
     }
+//Mod: Plugins
+    public final PluginManager getPluginManager()//Mod: Plugins
+    {//Mod: Plugins
+        return pluginManager;//Mod: Plugins
+    }//Mod: Plugins
 
     public static Logger logger = Logger.getLogger("Minecraft");
     public static HashMap field_6037_b = new HashMap();
@@ -596,5 +609,7 @@ public class MinecraftServer
     public boolean onlineMode;
     public boolean noAnimals;
     public boolean field_9011_n;
+    private PluginManagerProvider pluginManagerProvider;//Mod: Plugins
+    private PluginManager pluginManager;//Mod: Plugins
 
 }
